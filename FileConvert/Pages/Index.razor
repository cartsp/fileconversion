@page "/"
@inject IJSRuntime JS
@inject IFileConvertors FileConversionService
@inject NavigationManager NavigationManager

<h2>Secure in browser file conversion</h2>
<p>Enterprise friendly - no files uploaded to a server</p>

<InputFile class="inputfile" id="file-1" name="file-1" OnChange="HandleSelection" />
<label for="file-1" id="file-label"> <svg xmlns="http://www.w3.org/2000/svg" width="20" height="17" viewBox="0 0 20 17"> <path d="M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z"> </path> </svg> <span> Choose a file…</span> </label>

@if (chosenConvertors != null)
{
    @if (chosenConvertors.Count > 0)
    {
        <div class="d-flex justify-content-center">
            <div class="card">
                <div class="card-header">
                    <span>
                        Choose File Conversions
                    </span>
                </div>
                <div class="mb-12 col-md-12">
                    <div class="card-body row justify-content-center">
                        <div class="row w-100">
                            <div class="input-group mb-12 col-md-12">
                                <div class="input-group-prepend">
                                    <label class="input-group-text w-100" for="inputGroupSelect01">Convert To</label>
                                </div>
                                <select class="custom-select" id="inputGroupSelect01" @onchange="OnSelectingConversion">
                                    @if (chosenConvertors != null)
                                    {
                                        <option disabled selected value>Select Extension</option>
                                        @foreach (var cnt in chosenConvertors.Select(a => a.ConvertedExtension).Distinct())
                                        {
                                            <option class="conversion-choices" value="@cnt">@cnt</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <div class="card">
                <div class="card-header">
                    <span class="no-convertors-found">
                        No file conversions available for this file type
                    </span>
                </div>
            </div>
        </div>
    }
}
<br />

<div class="d-flex justify-content-center fixed-bottom index-available-conversions">
    <AvailableConversions />
</div>

@code {
    //With inspiration from Maria!
    string FileName;
    IImmutableList<Core.Entities.ConvertorDetails> chosenConvertors;
    MemoryStream memoryStreamToConvert;

    protected async Task OnSelectingConversion(ChangeEventArgs e)
    {
        var extensionToConvert = e.Value.ToString();

        await ConvertFileAndSave(extensionToConvert, memoryStreamToConvert);
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            memoryStreamToConvert = new MemoryStream();
            chosenConvertors = FileConversionService.GetConvertorsForFile(System.IO.Path.GetExtension(file.Name).ToLower()).ToImmutableList();
            await file.Data.CopyToAsync(memoryStreamToConvert);
            FileName = file.Name;
        }
    }

    protected async Task ConvertFileAndSave(string ExtensionToConvert, MemoryStream MemoryStreamToConvert)
    {
        //delay to allow ui to close dropdown before conversion
        await Task.Delay(10);

        var chosenConvertor = chosenConvertors
                                .ThatConvertTo(ExtensionToConvert)
                                .FirstOrDefault();

        using (var ConvertedMS = await chosenConvertor.Convert(MemoryStreamToConvert))
        {
            await JS.SaveAs(Path.GetFileNameWithoutExtension(FileName)
                            + ExtensionToConvert, ConvertedMS.ToArray());
            chosenConvertors = null;
        }
    }
}
