pipeline {
   agent any

   stages {
        stage('Checkout') {
             steps {
                git branch: 'DEV', credentialsId: 'git', url: 'https://github.com/cartsp/fileconversion.git'
             }
             
        }
        stage('Nuget restore') {
            steps {
                bat 'dotnet restore'
            }
        }
        stage('Build') {
            steps {
                bat 'dotnet publish -c Release'
            }
        }        
        stage('Deploy') {
            steps {
                powershell label: '', script: '''
                
                    If(-not(Get-InstalledModule 7Zip4PowerShell -ErrorAction silentlycontinue)){
                        Install-Module 7Zip4PowerShell -Confirm:$False -Force
                    }

                    $filePath = \'FileConvert\\bin\\Release\\netstandard2.1\\publish\\FileConvert\\dist\'
                    cd $filePath

                    $files = Get-ChildItem  -recurse -filter *.*
                    foreach ($file in $files) {Compress-7Zip -path $file -ArchiveFileName "$file.gz" -Format GZip}
                    Get-ChildItem -filter *.*  -recurse -Exclude *.gz| Remove-Item
                    Get-ChildItem -filter *.* -recurse | Rename-Item -NewName { $_ -replace \'\\.gz\',\'\' }'''

                dir('FileConvert/bin/Release/netstandard2.1/publish/FileConvert/dist/'){
                    azureUpload blobProperties: [cacheControl: '', contentEncoding: '', contentLanguage: '', contentType: '', detectContentType: true], cleanUpContainerOrShare: true, containerName: '$web', fileShareName: '', filesPath: '**/**', storageCredentialId: 'azure-storage', storageType: 'blobstorage'
                
                powershell label: '', script: '''
                    If(-not(Get-InstalledModule -Name Az -ErrorAction silentlycontinue)){
                        Install-Module -Name Az -AllowClobber -Scope CurrentUser -Confirm:$False -Force
                    }

                    $resourceGroup = "fileconversion"
                    $storageAccountName = "devfileconversion"

                    $storageAccount = Get-AzStorageAccount -ResourceGroupName $resourceGroup -Name $storageAccountName


                    $StorageAccountName = "devfileconversion" # i.e. WolfTrackerStorage
                    # If you\'re using VSTS I would strongly suggest using Key Vault to store and retrieve the key. Keep secrets out of your code!
                    $StorageAccountKey = "rgYcOvyRUc7uMn/xwZUsrJ/bDnp49EjzgicI/bgnf2XL9LFenHEger6VhqaRboz/9a1KtbgYu7zXSdfJgXuOeQ==" 
                    $ContainerName = "`$web"  # i.e. wolfpics

                    $Context = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey
                    $Blobs = Get-AzureStorageBlob -Context $Context -Container $ContainerName

                    foreach ($Blob in $Blobs) 
                    {  
                        $Extn = [IO.Path]::GetExtension($Blob.Name)
                        $ContentType = ""

                        switch ($Extn) {
                            ".json" { $ContentType = "application/json" }
                            ".js" { $ContentType = "application/javascript" }
                            ".svg" { $ContentType = "image/svg+xml" }
                            ".dll" { $ContentType = "application/octet-stream" }
                            ".wasm" { $ContentType = "application/wasm" }
                            ".html" { $ContentType = "text/html" }

                            Default { $ContentType = "" }
                        }
                        $CloudBlockBlob = [Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob] $Blob.ICloudBlob
                        if ($ContentType -ne "") {
                            $CloudBlockBlob.Properties.ContentType = $ContentType    
                        }
                        $CloudBlockBlob.Properties.ContentEncoding = \'gzip\' 
                        $CloudBlockBlob.SetProperties()    
                     }
                     '''
                }
            }
        }
        stage('Test') {
            steps {
                bat 'dotnet test'
            }
        }
    }
}